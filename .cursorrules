# WildDuck Client Library - AI Assistant Rules

## Project Overview

This is a TypeScript client library for the WildDuck email API, designed for React and React Native applications.

**Key Facts:**
- Package name: `@0xmail/wildduck_client`
- Current version: 0.0.12
- Tech stack: TypeScript, React, React Query (@tanstack/react-query), Axios
- Target: Browser and React Native environments
- API Coverage: ~15% of WildDuck API (see GAP_ANALYSIS.md)

## Architecture

```
src/
├── network/          # HTTP client and API communication
├── hooks/            # React hooks using @tanstack/react-query
│   ├── messages/     # Message operations
│   ├── mailboxes/    # Mailbox operations
│   ├── addresses/    # Email address management
│   ├── autoreply/    # Vacation/autoreply settings
│   └── users/        # User management
├── types/            # TypeScript type definitions
├── utils/            # Utility functions and helpers
└── __tests__/        # Unit and integration tests
```

## Code Style and Conventions

### TypeScript
- Use strict mode (`strict: true` in tsconfig.json)
- All functions must have explicit return types
- Prefer interfaces over types for object shapes
- Use type inference where obvious
- Never use `any` - use `unknown` or proper types

### React Hooks
- All hooks use @tanstack/react-query for data fetching
- Hook naming: `useWildduck<Feature><Action>` (e.g., `useWildduckGetMessages`)
- Return object shape: `{ <actionName>, loading, error, data }`
- Support optional development mode with mock data
- Include proper TypeScript generics for type safety

### File Organization
- One hook per file
- Group related hooks in directories (messages/, mailboxes/, etc.)
- Export all hooks from index.ts files
- Keep utility functions separate from business logic

### Naming Conventions
- Files: kebab-case (e.g., `use-wildduck-messages.ts`)
- Components/Hooks: PascalCase (e.g., `useWildduckAuth`)
- Functions: camelCase (e.g., `getMessages`)
- Constants: UPPER_SNAKE_CASE (e.g., `API_ENDPOINT`)
- Types/Interfaces: PascalCase with descriptive names (e.g., `WildDuckMessage`)

## Testing Strategy

### Unit Tests
- Use Vitest for all unit tests
- Mock external dependencies (axios, API calls)
- Test hooks with @testing-library/react
- Aim for 80%+ code coverage

### Integration Tests
- Located in `src/__tests__/integration/`
- Require live WildDuck server (crypto mode)
- Use environment variable `WILDDUCK_ENDPOINT` for server URL
- Tests automatically skip if server not configured
- Use test wallet: `0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266`

## API Implementation Guidelines

### Priority Order (from GAP_ANALYSIS.md)

**Critical Priority:**
1. User creation (`POST /users`)
2. Message upload (`POST /users/:user/mailboxes/:mailbox/messages`)
3. Full message details with metadata
4. Attachment downloads
5. Message operations (update/delete with proper error handling)

**High Priority:**
- Autoreply management (GET/PUT/DELETE `/users/:user/autoreply`)
- Bulk message operations
- Message forwarding and draft submission
- Raw message source access

**Medium Priority:**
- User updates
- Username resolution
- Quota management
- Application-Specific Passwords (ASPs)
- File storage
- Webhooks

### API Client Standards
- All endpoints must return typed responses
- Use axios for HTTP requests
- Handle errors consistently
- Support optional Cloudflare Worker URL for proxying
- Include session ID and IP in requests where supported
- Support both password and crypto (SIWE) authentication

## Development Workflow

### Before Committing
```bash
npm run check-all  # Runs lint + typecheck + tests
```

### Adding New Features
1. Check GAP_ANALYSIS.md for priority
2. Add types to `src/types/`
3. Implement network method in `src/network/`
4. Create React hook in appropriate `src/hooks/` subdirectory
5. Add comprehensive tests
6. Update HOOKS_DOCUMENTATION.md with examples
7. Run `npm run check-all`

### CI/CD
- Automated testing on Node 20.x and 22.x
- Automatic NPM publishing on version bumps
- GitHub releases created automatically
- Tests must pass before merge

## Common Patterns

### Hook Template
```typescript
import { useState } from 'react';

export function useWildduck<Feature><Action>(
  networkClient: NetworkClient,
  config: WildduckConfig,
  devMode?: boolean
) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [data, setData] = useState<ReturnType | null>(null);

  const actionName = async (
    userAuth: WildduckUserAuth,
    ...params
  ): Promise<ReturnType> => {
    try {
      setLoading(true);
      setError(null);

      if (devMode) {
        // Return mock data
        return mockData;
      }

      const result = await networkClient.action(...params);
      setData(result);
      return result;
    } catch (err) {
      setError(err as Error);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return { actionName, loading, error, data };
}
```

### Type Definitions
```typescript
// Request types
export interface <Feature><Action>Request {
  // Request fields
}

// Response types
export interface <Feature><Action>Response {
  success: boolean;
  // Response fields
}

// Common types
export interface WildduckUserAuth {
  userId: string;
  accessToken: string;
}
```

## Documentation Standards

### Code Comments
- Use JSDoc for all public APIs
- Include `@param` and `@returns` for functions
- Add `@example` for complex usage
- Document edge cases and gotchas

### README Updates
- Update API coverage table when implementing endpoints
- Add examples for new features
- Keep quick start guide current
- Link to detailed hook documentation

### HOOKS_DOCUMENTATION.md
- Follow existing format
- Include hook signature, parameters, response, and examples
- Show pagination and error handling patterns
- Document all options and their defaults

## Dependencies

### Peer Dependencies (Required by Consumers)
- `react`: ^19.2.0
- `@tanstack/react-query`: ^5.90.2
- `@sudobility/di`: ^1.4.5
- `@sudobility/types`: ^1.8.21
- `axios`: ^1.12.2

### Dev Dependencies
- TypeScript 5.9.3
- Vitest for testing
- ESLint + Prettier for code quality
- `viem` for EVM wallet operations in tests

## Environment Variables

### Development
- `WILDDUCK_ENDPOINT` - WildDuck API endpoint (for integration tests)
- `WILDDUCK_EMAIL_DOMAIN` - Email domain for test users (default: example.com)
- `WILDDUCK_API_TOKEN` - Optional admin API token

## Security Considerations

- Never commit secrets or API tokens
- Test wallet private key is public (Hardhat default) - only for testing
- Crypto authentication uses SIWE (EIP-4361) standard
- Support for TOTP and U2F 2FA methods
- Validate all user inputs
- Sanitize error messages before returning to client

## Performance Guidelines

- Use cursor-based pagination for large datasets
- Avoid requesting counters/sizes unless necessary (expensive operations)
- Cache mailbox lists and user info when possible
- Batch operations when possible
- Use React Query's caching effectively

## Error Handling

### Error Response Format
```typescript
{
  error: string;
  code: string;
  details?: Array<{
    message: string;
    path: string[];
    type: string;
  }>;
}
```

### Common Error Codes
- `InputValidationError` - Invalid request parameters
- `UserNotFound` - User does not exist
- `MailboxNotFound` - Mailbox does not exist
- `MessageNotFound` - Message does not exist
- `AuthenticationFailed` - Auth credentials invalid
- `OverQuotaError` - User over storage quota
- `RateLimitedError` - Rate limit exceeded

## Future Enhancements

See GAP_ANALYSIS.md Section 4 for roadmap:
- Phase 1: Core functionality (user creation, message upload, attachments)
- Phase 2: Enhanced features (autoreply, bulk ops, forwarding)
- Phase 3: User management (updates, ASPs, storage, webhooks)
- Phase 4: Advanced features (admin operations, audit, archives)

## References

- [WildDuck API Documentation](https://docs.wildduck.email/api/)
- [WildDuck GitHub](https://github.com/nodemailer/wildduck)
- [React Query Documentation](https://tanstack.com/query/latest)
- [SIWE (Sign-In with Ethereum)](https://eips.ethereum.org/EIPS/eip-4361)

## AI Assistant Instructions

When working on this project:

1. **Always check GAP_ANALYSIS.md** before implementing new features to understand priorities
2. **Follow the existing hook pattern** - don't deviate without good reason
3. **Add comprehensive tests** for all new functionality
4. **Update documentation** - HOOKS_DOCUMENTATION.md must be updated with new hooks
5. **Run `npm run check-all`** before suggesting code is complete
6. **Type everything** - no implicit any, use proper TypeScript
7. **Consider React Native** - avoid browser-specific APIs
8. **Check existing types** in @sudobility/types package before creating new ones
9. **Reference WILDDUCK_API_ENDPOINTS.md** for exact API specs
10. **Use the established patterns** for error handling and data fetching

### When Implementing New Endpoints

1. Review the endpoint in WILDDUCK_API_ENDPOINTS.md
2. Check if types exist in @sudobility/types or create them
3. Add network client method
4. Create React hook following the template
5. Write unit tests with mocks
6. Consider integration test if applicable
7. Document in HOOKS_DOCUMENTATION.md with examples
8. Update README.md API coverage table

### When Fixing Bugs

1. Write a failing test first
2. Fix the bug
3. Verify test passes
4. Check if documentation needs updating
5. Consider if integration test is needed
